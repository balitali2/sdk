@Library('shared-library') _

def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    choice(name: 'TEST_ENV', choices: ['development'], description: 'Environment')
    choice(name: 'BLOCKCHAIN', choices: ['ethereum', 'tezos', 'flow', 'solana', 'all'], description: 'Blockchain')
  }

  triggers {
    parameterizedCron('''
        0 7 * * 1-5 %TEST_ENV=development;BLOCKCHAIN=ethereum
        30 7 * * 1-5 %TEST_ENV=development;BLOCKCHAIN=tezos
        0 8 * * 1-5 %TEST_ENV=development;BLOCKCHAIN=solana
        30 8 * * 1-5 %TEST_ENV=development;BLOCKCHAIN=flow
    ''')
  }

  stages {
    stage("Run e2e tests") {
      agent {
        docker {
          image "node:16-bullseye"
          args utils.dockerAgentArgs()
          reuseNode true
        }
      }
      steps {
          sh '''yarn
              yarn bootstrap
              yarn clean
              yarn build
              yarn e2e-tests'''
      }
    }
  }

  post {
    failure {
      wrap([$class: 'BuildUser']) {
        slackSend channel: '#protocol-e2e-tests',
          color: COLOR_MAP[currentBuild.currentResult],
          message: "*${currentBuild.currentResult}:* Test run for blockchain=*${params.BLOCKCHAIN}*. Duration=${currentBuild.durationString}\n More info: ${env.BUILD_URL}"
      }
    }
    always {
      postReport([:])   
      cleanWs()
    }
  }
}
