@Library('shared-library') _

def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    timeout(time: 1, unit: 'HOURS')
  }
  environment {
    ALLURE_TOKEN = '5f5c7394-5595-4636-8757-3f2d7469d03a'
    ALLURE_ENDPOINT = 'https://rarible.testops.cloud/'
    ALLURE_PROJECT_ID = '2'
  }
  stages {
    stage("Run SDK e2e tests on all test envs") {
      matrix{
        axes {
          axis {
            name 'BLOCKCHAIN'
            values 'ethereum'
          }
          axis {
            name 'TEST_ENV'
            values 'development', 'staging'
          }
        }
        stages{
          stage("SDK e2e tests") {
            agent {
              docker {
                image "node:16-bullseye"
                args utils.dockerAgentArgs()
                reuseNode true
              }
            }
            steps {
                sh '''
                    wget https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_amd64 -O ./allurectl
                    chmod +x ./allurectl
                    yarn install --network-timeout=30000
                    yarn build
                    ./allurectl watch --results ./packages/e2e-tests/allure-results -- yarn e2e-tests
                  '''
            }
          }
        }
      }
    }
  }

  post {
    // failure {
    //   wrap([$class: 'BuildUser']) {
    //     slackSend channel: '#protocol-e2e-tests',
    //       color: COLOR_MAP[currentBuild.currentResult],
    //       message: "*${currentBuild.currentResult}:* Test run for blockchain=*${params.BLOCKCHAIN}*. Duration=${currentBuild.durationString}\n More info: ${env.BUILD_URL}"
    //   }
    // }
    always {
      postReport([:])   
      cleanWs()
      script {
        allure([
          includeProperties: false,
          jdk: '',
          properties: [],
          reportBuildPolicy: 'ALWAYS',
          results: [[path: 'allure-results']]
        ])
      }
    }
  }
}
